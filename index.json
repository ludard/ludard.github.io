[{"categories":null,"contents":"\n你好！我是卢达，欢迎来到我的博客。这里记录了我的一些技术文章和思考点滴。网站域名是 ludard.com，名字 luda + 职业 RD(Research \u0026amp; Developer) 开发工程师。\n关于我 我是一名终生学习实践者，喜欢读书和思考，喜欢编程和投资。主业是一名后端程序员，也做过一段时间的全栈工程师。主要技术栈是 C# + Golang。\n最喜欢的格言：山就在那里！\n关于本站 本站主域名 https://ludard.com，托管于 GitLab Pages 本站源码托管于 GitHub 本站使用 Hugo 生成，采用 hugo-theme-jane 主题 主要发布编程技术主要是 Golang/C# 方面的文章，偶尔也会记录一下生活感想 有时间会将碎片化笔记整理成册，按等级和内容成书 本站所有原创文章默认使用 署名-非商业性使用-禁止演绎 4.0 国际许可协议（CC BY-NC-ND 4.0），如果转载请注明作者和出处，谢谢！ 开发项目 SQL Server 数据库集群，支持高可用自动故障转移、自动读写分离、容灾异地备份等。操作简单，集成在管理工具里。 SQL Server 监控、分析、运维一体化平台，可以实时大屏显示、异常提醒、智能分析SQL语句、自动生成运维优化脚本，可以自动定时执行，执行后也可回退操作。 变更记录 2022-09-10 中秋节网站正式上线 2022-09-09 开发调试网站源码 ","permalink":"http://ludard.com/about/","tags":null,"title":"关于"},{"categories":["技术"],"contents":"提供全文搜索的引擎有很多，但是使用简单、结果准确的只有以下几个：\nMeilisearch 免费开源、快速准确、支持中文、使用简单的搜索引擎，如果有服务器非常推荐。 algolia 商业软件，每月免费一万次搜索。适用于小型博客 Fuse 非常轻量级的模糊搜索JS库 Pagefind 静态全文搜索工具，通过 wrapper package through npm 生成索引文件 注意：Hugo 官网提供的 其它搜索方案 很多都过时了或者不支持中文搜索，比如 hugo-lunr-zh 5年没更新了。\n因为我现在还没有购买服务器，又不想使用商业产品，安装 NPM 又比较麻烦，所以只能使用 Fuse了。\nFuse 有以下优点：\n配置简单、结果准确、支持中文、可以自定义配置 直接开箱即用，没有其它依赖项，如 npm 、grunt 等，也不需要上传数据文件 开发相当活跃，使用人数较多 当然，也有一些缺点：\n对小型博客类搜索比较快，但中大型比较慢 搜索结果显示的是博客开头部分而不是高亮匹配的区域，有些不友好 总体而言，用于博客搜索是够了。\nFuse 配置 因为我使用的 Hugo 主题是 jane，所以搜索页面和JS脚本都放在主题目录下。\n在hugo博客根目录添加4个文件：\ncontent/search.md 在主菜单栏上添加 搜索 菜单 themes/jane/layouts/_default/search.html 搜索页面 themes/jane/layouts/_default/index.json 搜索结果数据格式 static/js/search.js 搜索页面里点击搜索后的操作 搜索菜单 content/search.md 搜索菜单\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 --- title: \u0026#34;🔍搜索\u0026#34; sitemap: priority : 0.1 layout: \u0026#34;search\u0026#34; menu: \u0026#34;main\u0026#34; slug: search --- This file exists solely to respond to /search URL with the related `search` layout template. No content shown here is rendered, all content is based in the template layouts/page/search.html Setting a very low sitemap priority will tell search engines this is not important content. This implementation uses Fusejs, jquery and mark.js 搜索页面 themes/jane/layouts/_default/search.html 搜索页面\n我定制的搜索页面有以下功能：\n页面自适应布局，已适配手机、平板、PC屏幕 和博客文章风格保持一致，上面是菜单，下面是页脚，中间是搜索结果。 如果想定制可以参考同目录下 baseof.html 文件的格式。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.3.1.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/fuse.js/3.2.0/fuse.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/mark.js/8.11.1/jquery.mark.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://ludard.com/js/search.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt; {{- block \u0026#34;title\u0026#34; . -}} {{ if .IsPage }}{{ .Title }} - {{ .Site.Title }}{{ else }}{{ .Site.Title }}{{ end }} {{- end -}} \u0026lt;/title\u0026gt; {{ partial \u0026#34;head.html\u0026#34; . }} \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; @media (max-width: 425px) { /*0~425*/ .search-container { padding: 3em 1em; margin: 0 0 1em 0; background-color: #fff; font-size: 11px; font-weight: 200; } #search-box { width: 85%; height: 25px; border: 2px solid #e58f38; margin: auto; } } @media (min-width: 426px) and (max-width: 768px) { /*426~768*/ .search-container { padding: 3em 2em; margin: 0 2em 1.5em; background-color: #fff; } #search-box { width: 80%; height: 40px; border: 2px solid #e58f38; margin: auto; } } @media (min-width: 769px) { /*769~+∞*/ .search-container { padding: 3em 5em; margin: 0 5em 3em; background-color: #fff; } #search-box { width:71%; height:40px; border:2px solid #E58F38; margin:auto; } } #search-query { float:left; width:80%; height:100%;/*高38（因为文本框内外边框要占用1像素所以总体高度减2，其他盒子同理）*/ outline:none; border:none;/*取消文本框内外边框*/ } #search-submit { float:left; text-align: center; width:20%; height:100%; color:white; background-color:#E58F38; border:none; outline:none;/*取消边框和外边框将按钮边框去掉*/ cursor: pointer; } \u0026lt;/style\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;body\u0026gt; {{ partial \u0026#34;slideout.html\u0026#34; . }} {{ if or .Site.Params.photoswipe .Site.Params.fancybox }} {{ partial \u0026#34;photoswipe.html\u0026#34; . }} {{ end }} {{ if .Site.Params.search.google.enable }} {{ partial \u0026#34;search_google.html\u0026#34; . }} {{ end }} \u0026lt;header id=\u0026#34;header\u0026#34; class=\u0026#34;header container\u0026#34;\u0026gt; {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;mobile-panel\u0026#34;\u0026gt; \u0026lt;section class=\u0026#34;resume-section p-3 p-lg-5 d-flex flex-column\u0026#34;\u0026gt; \u0026lt;main id=\u0026#34;main\u0026#34; class=\u0026#34;main bg-llight wallpaper\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content-wrapper\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34; class=\u0026#34;content container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;search-container\u0026#34;\u0026gt; \u0026lt;form action=\u0026#34;https://ludard.com/search\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;search-box\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;search-query\u0026#34; name=\u0026#34;s\u0026#34; placeholder=\u0026#34;输入搜索内容...\u0026#34; /\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; id=\u0026#34;search-submit\u0026#34; action=\u0026#34;https://ludard.com/search\u0026#34;\u0026gt;搜索\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div id=\u0026#34;search-results\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer id=\u0026#34;footer\u0026#34; class=\u0026#34;footer\u0026#34;\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/footer\u0026gt; \u0026lt;div class=\u0026#34;back-to-top\u0026#34; id=\u0026#34;back-to-top\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;iconfont\u0026#34;\u0026gt; {{/* icon up */}} {{ partial \u0026#34;svg/up.svg\u0026#34; }} \u0026lt;/i\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- this template is sucked in by search.js and appended to the search-results div above. So editing here will adjust style --\u0026gt; \u0026lt;script id=\u0026#34;search-result-template\u0026#34; type=\u0026#34;text/x-js-template\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;summary-${key}\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;\u0026lt;a href=\u0026#34;${link}\u0026#34;\u0026gt;${title}\u0026lt;/a\u0026gt;\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt;${snippet}\u0026lt;/p\u0026gt; ${ isset tags }\u0026lt;p\u0026gt;Tags: ${tags}\u0026lt;/p\u0026gt;${ end } ${ isset categories }\u0026lt;p\u0026gt;Categories: ${categories}\u0026lt;/p\u0026gt;${ end } \u0026lt;/div\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#39;search-query\u0026#39;).focus(); \u0026lt;/script\u0026gt; \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 注意：\n最核心的搜索组件 fuse.js 经我测试后最好不要使用最新的 6.x 版本，因为新版本只能搜索 post 目录的内容，其它目录的内容无法搜索。而且搜索结果顺序有点乱。\nscript 里的引用脚本 https://ludard.com/js/search.js 必须是 https 协议，否则无法搜索。\nform 提交的 URL https://ludard.com/search 改为自已的网址。并且必须是 https协议。否则在搜索时有以下错误提示：\n搜索结果 themes/jane/layouts/_default/index.json\n1 2 3 4 5 {{- $.Scratch.Add \u0026#34;index\u0026#34; slice -}} {{- range .Site.RegularPages -}} {{- $.Scratch.Add \u0026#34;index\u0026#34; (dict \u0026#34;title\u0026#34; .Title \u0026#34;tags\u0026#34; .Params.tags \u0026#34;categories\u0026#34; .Params.categories \u0026#34;contents\u0026#34; .Plain \u0026#34;permalink\u0026#34; .Permalink) -}} {{- end -}} {{- $.Scratch.Get \u0026#34;index\u0026#34; | jsonify -}} 搜索操作 static/js/search.js 操作脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 summaryInclude=60; var fuseOptions = { shouldSort: true, includeMatches: true, // threshold: 0.0, threshold: 0.3, tokenize:true, location: 0, distance: 100, maxPatternLength: 32, minMatchCharLength: 1, keys: [ {name:\u0026#34;title\u0026#34;,weight:0.8}, {name:\u0026#34;contents\u0026#34;,weight:0.5}, {name:\u0026#34;tags\u0026#34;,weight:0.3} // , {name:\u0026#34;categories\u0026#34;,weight:0.3} ] }; var searchQuery = param(\u0026#34;s\u0026#34;); if(searchQuery){ $(\u0026#34;#search-query\u0026#34;).val(searchQuery); executeSearch(searchQuery); }else { $(\u0026#39;#search-results\u0026#39;).append(\u0026#34;\u0026lt;p\u0026gt;Please enter a word or phrase above\u0026lt;/p\u0026gt;\u0026#34;); } function executeSearch(searchQuery){ $.getJSON( \u0026#34;/index.json\u0026#34;, function( data ) { var pages = data; var fuse = new Fuse(pages, fuseOptions); var result = fuse.search(searchQuery); console.log({\u0026#34;matches\u0026#34;:result}); if(result.length \u0026gt; 0){ populateResults(result); }else{ $(\u0026#39;#search-results\u0026#39;).append(\u0026#34;\u0026lt;p\u0026gt;No matches found\u0026lt;/p\u0026gt;\u0026#34;); } }); } function populateResults(result){ $.each(result,function(key,value){ var contents= value.item.contents; var snippet = \u0026#34;\u0026#34;; var snippetHighlights=[]; var tags =[]; if( fuseOptions.tokenize ){ snippetHighlights.push(searchQuery); }else{ $.each(value.matches,function(matchKey,mvalue){ if(mvalue.key == \u0026#34;tags\u0026#34; || mvalue.key == \u0026#34;categories\u0026#34; ){ snippetHighlights.push(mvalue.value); }else if(mvalue.key == \u0026#34;contents\u0026#34;){ start = mvalue.indices[0][0]-summaryInclude\u0026gt;0?mvalue.indices[0][0]-summaryInclude:0; end = mvalue.indices[0][1]+summaryInclude\u0026lt;contents.length?mvalue.indices[0][1]+summaryInclude:contents.length; snippet += contents.substring(start,end); snippetHighlights.push(mvalue.value.substring(mvalue.indices[0][0],mvalue.indices[0][1]-mvalue.indices[0][0]+1)); } }); } if(snippet.length\u0026lt;1){ snippet += contents.substring(0,summaryInclude*2); } //pull template from hugo templarte definition var templateDefinition = $(\u0026#39;#search-result-template\u0026#39;).html(); //replace values var output = render(templateDefinition,{key:key,title:value.item.title,link:value.item.permalink,tags:value.item.tags,categories:value.item.categories,snippet:snippet}); $(\u0026#39;#search-results\u0026#39;).append(output); $.each(snippetHighlights,function(snipkey,snipvalue){ $(\u0026#34;#summary-\u0026#34;+key).mark(snipvalue); }); }); } function param(name) { return decodeURIComponent((location.search.split(name + \u0026#39;=\u0026#39;)[1] || \u0026#39;\u0026#39;).split(\u0026#39;\u0026amp;\u0026#39;)[0]).replace(/\\+/g, \u0026#39; \u0026#39;); } function render(templateString, data) { var conditionalMatches,conditionalPattern,copy; conditionalPattern = /\\$\\{\\s*isset ([a-zA-Z]*) \\s*\\}(.*)\\$\\{\\s*end\\s*}/g; //since loop below depends on re.lastInxdex, we use a copy to capture any manipulations whilst inside the loop copy = templateString; while ((conditionalMatches = conditionalPattern.exec(templateString)) !== null) { if(data[conditionalMatches[1]]){ //valid key, remove conditionals, leave contents. copy = copy.replace(conditionalMatches[0],conditionalMatches[2]); }else{ //not valid, remove entire section copy = copy.replace(conditionalMatches[0],\u0026#39;\u0026#39;); } } templateString = copy; //now any conditionals removed we can do simple substitution var key, find, re; for (key in data) { find = \u0026#39;\\\\$\\\\{\\\\s*\u0026#39; + key + \u0026#39;\\\\s*\\\\}\u0026#39;; re = new RegExp(find, \u0026#39;g\u0026#39;); templateString = templateString.replace(re, data[key]); } return templateString; } config.toml 配置 在博客配置文件 config.toml 添加以下配置：\n1 2 [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] 这样 Fuse 所有配置就已经完成了，使用命令 hugo server 就可以看到效果了。是不是非常简单？\n成果展示 搜索页面：\n搜索中文 博客 结果：\n参考资源 https://github.com/krisk/Fuse\nfuzzy searching document\nClient side searching for Hugo.io with Fuse.js\nHugo JS Searching with Fuse.js\n","permalink":"http://ludard.com/post/tech/create-blog-step-by-step-5/","tags":["博客搭建","Hugo","Fuse"],"title":"「Hugo 博客搭建」5.添加全文搜索"},{"categories":["技术"],"contents":"经过几期的搭建，博客已经完全正常运行了。是时候给博客添加评论系统了，评论系统有以下好处：\n文章有不通顺的地方，比如有错别字、敏感字、配图错误等，读者可以指出来有利于提高文章质量 读者阅读之后可能有不清楚的地方，作者可以答疑解惑，有利于双方共同提升 更多的正向反馈能激发创作热情，更长久的创作 …… 经过搜索对比后，当前有两种类型的评论系统\n基于 Github 的 Issues 或 Discussions 存储的评论系统，如 Giscus、Utterances、Gitment 等 基于 Serveless 平台云数据库免费额度部署的评论系统，如 Waline、Twikoo 等，都可以使用 云开发 / Vercel / 私有服务器 一键部署 最后，我选择了 Giscus ，因为它有以下好处：\n使用 GitHub Discussions 作为存储系统，不用担心云平台突然关闭所有评论消失，也不用担心恶意流量导致额度超支 迁移到其它评论系统非常方便 开发比较注重用户反馈，产品迭代较快 缺点是必须 GitHub OAuth 授权登录后才可以评论，如果能接受这点其它都不是问题。\n创建 Github 评论仓库 在 Github 上创建一个 comments-for-blog 仓库，用于存储博客的评论。\n在个人主页新建仓库 New repository\n新建时仓库一定要是 public 公开的，否则无法访问和存储。\n打开仓库设置 Settings -\u0026gt; General -\u0026gt; Features -\u0026gt; 勾选 Discussions\n第一次启用 Discussions 时需要点击下面的 Set up discussions 按钮，为讨论组设置欢迎用语和讨论规则。设置完成后点击 Start discussions 按钮就完成了。\n如果没有特殊需求，讨论组的 Discussions 默认使用 📣Announcements 分类即可\n创建完成就会看到满屏的欢迎礼花。\n安装 Giscus App 在浏览器再打开一个标签页，打开 Giscus App 网址，选择 Install 安装按钮\n默认是授权所有仓库 All repositories，如果不想授权所有 GitHub 存储库，可以只选择用于评论的存储库。我选择 Only select repositories -\u0026gt; Select repositories -\u0026gt; 选择 comments-for-blog 仓库 -\u0026gt; Install -\u0026gt; 输入Github 密码验证权限，完成后跳转到 Giscus App 设置\n如果以后想更改 Giscus App 设置，可以打开个人主页 -\u0026gt; Applications -\u0026gt; Giscus 找到设置\nGiscus 设置 Github 仓库和 Giscus App 创建完成后，打开 Giscus 中文官网 ，按页面向导顺序依次设置评论功能的语言、GitHub 存储库和个性化配置。\n我的配置如下：\n语言选择 简体中文，仓库选择 ludard/comments-for-blog。注意格式是 用户名/仓库名 前面的网址不要。\n页面 ↔️ discussion 映射关系 选择 pathname\nDiscussion 分类选择 📣Announcements\n特性启用：\n将评论框放在评论上方 因为评论现在还不支持分页功能，如果评论过多要滑动到页面最底部非常不方便，放在上方就可以直接评论了。 懒加载评论 如果评论过多会导致页面打开加载缓慢，启用懒加载可以让博客主页面先加载出来，然后再加载评论，使用更友好。 主题我选择了 GitHub Light Tritanopia。\n配置完成后就会生成一个JS脚本，然后把脚本放在页面上就可以了。注意保存好此脚本，后面在博客配置时需要用到。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;ludard/comments-for-blog\u0026#34; data-repo-id=\u0026#34;R_kgDOIE30_g\u0026#34; data-category=\u0026#34;Announcements\u0026#34; data-category-id=\u0026#34;DIC_kwDOIE30_s4CRp_x\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;top\u0026#34; data-theme=\u0026#34;light_tritanopia\u0026#34; data-lang=\u0026#34;zh-CN\u0026#34; data-loading=\u0026#34;lazy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; Hugo主题配置 Giscus 我的博客使用的主题是 hugo-theme-jane，本身已自支持 Giscus了，可以在目录 \\hugo-blog-code\\themes\\jane\\layouts\\partials\\comments 看到所有支持的评论系统，其中就有 giscus.html，打开后就看到内容和 JS 脚本的内容模板是一样的。\n所以，配置就比较简单了，打开博客配置文件 config.toml，添加 giscus.html 内容模板的特性就可以了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 [params] [params.giscus] enable = true repo = \u0026#34;ludard/comments-for-blog\u0026#34; repoID = \u0026#34;R_kgDOIE30_g\u0026#34; category = \u0026#34;Announcements\u0026#34; categoryID = \u0026#34;DIC_kwDOIE30_s4CRp_x\u0026#34; mapping = \u0026#34;pathname\u0026#34; reactionsEnabled = \u0026#34;1\u0026#34; emitMetadata = \u0026#34;0\u0026#34; inputPosition = \u0026#34;top\u0026#34; theme = \u0026#34;light_tritanopia\u0026#34; lang = \u0026#34;zh-CN\u0026#34; loading = \u0026#34;lazy\u0026#34; 注意： [params] 标记就不用了，只需要下面的 [params.giscus] 部分就可以了，我只是用来表示格式的缩进关系。\n最后，在想要开放评论的文章的元数据里开启评论功能：comment: true\n再推送到博客仓库部署后评论功能就生效了！\n测试评论功能 随便打开一篇博客，点击评论区的 Github 登录，再点击 Authorize giscus 授权按钮就可以评论了。\n新加一条评论，带标题、样式、表情\n评论和回复都正常，再打开 comments-for-blog 仓库发现评论也存储正常。\n如果发现有过激评论就可以在 comments-for-blog 仓库删除即可。\n好了，评论功能都正常了。Enjoy！\n参考资源 https://giscus.app/zh-CN\n将博客评论从 Utterances 无缝迁移到 Giscus\n迁移博客评论系统从Utteranc.es到Giscus\nUsing giscus for comments in Hugo\n使用 Vercel 免费部署 Giscus 评论系统\nHugo博客添加Twikoo评论\nWaline 快速上手\n","permalink":"http://ludard.com/post/tech/create-blog-step-by-step-4/","tags":["博客搭建","Hugo","Giscus"],"title":"「Hugo 博客搭建」4.添加博客评论系统"},{"categories":["技术"],"contents":"使用 Github Action 配置 好就可以写博客并发布了，但是使用 Github Page 有以下弊端：\n国内某些地区访问不稳定，速度也时好时坏，所以需要加速一下 Github 屏蔽了百度蜘蛛，百度可能无法抓取里面的内容、从而导致网站迟迟不被收录，也无法被搜索 经过搜索对比后发现现在免费的、速度比较快的、方便使用的加速网站有2个：\nVercel 大佬云集，公司不差钱 Netlify 它们都同时具备以下优点：\n在全球都有很多CDN节点，访问速度快并且免费额度也够博客使用 可以自定义域名，自动拉取部署，使用简单 可以使用 Github、Gitlab、Bitbucket、Email 注册，直接导入这些网站的项目 很多知名开源项目都在使用，平台比较成熟 融资较多，不易倒闭 最后，我选择了 Vercel。\n注册 Vercel 现在注册需要绑定 Github 和 手机号，支持国内手机号。\n导入 Github 项目自动部署 打开 主页面板 -\u0026gt; Add New... -\u0026gt; Project ，选择博客项目 选择 Select a Git Namespace 下拉菜单 -\u0026gt; Add Github Account 在弹出的页面上授权访问所有 Github 仓库，再点击 Install 再选择自己的 Github账号，我的是 ludard，选择后就会列出所有仓库包括私有仓库。然后选择 Import 博客项目 ludard.github.io 再直接 Deploy 部署。如果项目是 Hugo 源码，可以在 FRAMEWORK PRESET 选择 Hugo。其它项目如 Hexo、Vue、Next.js等也都支持 打开 Vercel Overview 页面 和 Deploy 页面发现当前 Production 获取的 Github 的 main 分支，而不是网站内容 ph-pages 分支。所以，需要将 ph-pages 设为生产分支才能正常显示。\n打开 ludard-github-io 项目 -\u0026gt; Git -\u0026gt; Production Branch 设置为 gh-pages -\u0026gt; Save 保存。这样等待 Vercel CI 自动部署完成后博客内容就正常显示了。\n设置自定义域名 部署完成后，就可以设置绑定自己购买的域名了。\n注意：*.vercel.app 域名在国内因为政策原因被禁了，所以所有子域名都不能访问。不能打开 user-xxx.vercel.app 是正常的，绑定自己的域名就可以快速访问了。\n打开 ludard-github-io 项目 -\u0026gt; Settings -\u0026gt; Domains -\u0026gt; 输入自定义域名 ludard.com -\u0026gt; Add\n在弹出窗口选择第2项 Add ludard.com and redirect www.ludard.com to it，默认使用 ludard.com 域名，如果输入 www.ludard.com自动跳转到 ludard.com。再点击 Add确定\n也可以添加二级域名比如 blog.ludard.com，我主要是技术博客就直接作为主页了\n添加后出现解析错误，是因为域名DNS服务器没有添加 CNAME记录，按错误提示的DNS信息添加2条记录就可以了 我的域名是阿里云的，打开阿里云控制台 -\u0026gt; 域名 -\u0026gt; 域名解析 -\u0026gt; 点击博客域名ludard.com -\u0026gt; 解析设置\n在打开的页面中点击 添加记录，添加以下2条记录：\nType Name Value CNAME www cname.vercel-dns.com A @ 76.76.21.21 Value 是 Vercel 解析错误后提示的需要添加的值\n添加完成后，再打开 Vercel 域名就看到解析正常了\n再打开 Overview 页面，检查所有设置都正常，网页快照也显示正常\n在浏览器输入自己的域名网址 ludard.com 和 www.ludard.com 一切正常。\n再测试一下全国的网络访问速度，发现绝大部分地区都非常快。Nice！\n再测试一下世界各地区的访问速度，大部分也是非常快的。\n然后就可以愉快的写博客了。DONE！ 后记：2022年9月底使用 Vercel 加速一个月了一切正常，没有出现封锁、卡慢的情况。\n","permalink":"http://ludard.com/post/tech/create-blog-step-by-step-3/","tags":["博客搭建","Hugo","Github Action","vercel"],"title":"「Hugo 博客搭建」3.博客加速和自定义域名"},{"categories":["技术"],"contents":"搭建本地运行环境 完成之后，就可以将源码推送到远程仓库进行托管了，托管了之后就可以直接访问网站了，我选择的托管平台是 Github。\n整个流程是这样的，先创建3个代码仓库：\nhugo-blog-code 私有仓库，存放网站的源代码 ludard.github.io 公有仓库，源码仓库编译生成好的博客网站 comments-for-blog 博客的评论系统 这样将网站的源码和内容进行了公私分离，既保护了源码的私密性，又保证了博客内容的简洁性。\n仓库调用顺序和关系：\n本地代码调试好了之后提交到 hugo-blog-code 私有仓库，保证源码不外泄。 hugo-blog-code 仓库配置 Github Action Workflow 生成并编译成网站，然后发布到 ludard.github.io 公有仓库 ludard.github.io 仅存放博客内容，负责对外展示和访问 comments-for-blog 仓库存储用户评论，和 ludard.github.io 仓库相绑定。 创建源码私有仓库 在 Github 新建 New Repository 创建完成之后复制仓库的地址：git@github.com:ludard/hugo-blog-code.git\n打开 Git bash ，切换到博客所有目录，按下列命令将博客源码提交到私有仓库：\n1 2 3 4 5 6 7 cd /d/github/myBlog git init # 初始化源码 git add . #将当前目录添加到git git commit -m \u0026#34;Init Blog\u0026#34; # 提交到本地git仓库 git remote add origin git@github.com:ludard/hugo-blog-code.git # 添加远程仓库地址 git push -u origin main # 将源码推送到github仓库 git status # 查看源码状态 注意：在本地目录使用命令 git init 初始化时，默认分支名称是 master，而 github 仓库默认分支是 main。如果推送报错：\nerror: src refspec main does not match any. error: failed to push some refs to \u0026lsquo;git@github.com:ludard/hugo-blog-code.git\u0026rsquo;\n说明本地仓库和远程仓库分支名称不一致造成的。有两种解决办法：\n强制推送 git push --force 不推荐\n将本地仓库分支重全名，和远程仓库分支一样：git branch -m oldBranchName newBranchName\n按以下步骤解决：\n执行git clone git@github.com:ludard/hugo-blog-code.git 将远程仓库下载到本地\n将本地源码内容复制合并到 hugo-blog-code 目录\n切换到 hugo-blog-code 目录，此时分支名称就是 main了\n依次执行以下命令：\n1 2 3 4 cd hugo-blog-code/ git add . git commit -m \u0026#34;Init Blog\u0026#34; git push #因为clone下来的，可以直接push，不需要添加远程仓库 查看 hugo-blog-code 仓库，源码已经提交了\n创建博客公有仓库 打开 Github 个人主页，新建 New Repository，仓库名称是 ludard.github.io\n注意，这个公开仓库有2点需要注意：\n仓库名称有固定的格式，用户名 ludard + .github.io。一个用户名仅能创建一个这样的仓库，创建好之后就可以直接作为博客使用了。博客域名就是 https://ludard.github.io 一定要是公开仓库，因为这个博客是供对外访问的，如果私有就无法访问了 创建好之后，就可以将仓库名称作为网址访问了\n新建博客内容分支 创建好仓库后再创建一个分支专门用来接收从私有仓库推送过来的博客内容， 这样主分支看起来简洁一些。\n打开 ludard.github.io 仓库，点击 main 主分支，搜索 gh-pages 分支，如果没有就点击 Create branch 创建分支\n再打开仓库的 Settings 设置 -\u0026gt; Pages，Source 选择 Deploy from a branch，Branch 选择 gh-pages，然后点击 Save 保存\n创建 PAT 配置私库连接公库 Personal Access Token(PAT) 创建PAT的主要目的是授权给私有仓库访问写入目标仓库的权限，可以让私有库的actions推送构建好的代码到目标仓库。\nPAT 有两种级别：\n全局 可以访问所有仓库。在个人账户页面配置，Profile Photo -\u0026gt; Settings -\u0026gt; Developer settings -\u0026gt; Personal access tokens -\u0026gt; Generate new token 仓库级 只能访问一个仓库，在被访问仓库的 Deploy key 创建 因为推送是从 私有仓库 hugo-blog-code 推送到 公有仓库 ludard.github.io，所以需要在 ludard.github.io 仓库上配置 Deploy key 供 hugo-blog-code 访问，在 hugo-blog-code 仓库上配置 Action 负责编译推送代码。\n创建Deploy key 配置 Deploy key 需要 SSH Key，所以先生成密钥对。\n打开 Git bash ，创建密钥对： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $ ssh-keygen -t rsa -C \u0026#34;ludard@outlook.com\u0026#34; Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/Ludard/.ssh/id_rsa): .ssh/blogkey Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in .ssh/blogkey. Your public key has been saved in .ssh/blogkey.pub. The key fingerprint is: SHA256:On4M4msd2DnkDlIflCNqQQ8gwpDqYrRs9O7j2VtBHYI ludard@outlook.com The key\u0026#39;s randomart image is: +---[RSA 2048]----+ |B+o .o . | |+..o.E+ o . | |. o.o o . | |.oo . + | |=.o. * +S | |.*..+ O.. | |+ .o =o* | | o=.+.o | | o=o+o. | +----[SHA256]-----+ 备注：\nssh-keygen -t rsa -C \u0026quot;ludard@outlook.com\u0026quot; 创建密钥，邮箱必须与Github账户邮箱一致 Enter file in which to save the key 密钥文件名称和位置 Enter passphrase 密钥的密码，每次连接仓库时都需要输入验证\n密钥的密码一定要为空，我因为这个问题查了一天资料，最后才想通在自动化时不能输入也没法配置代理，所以一直无法推送到公有仓库。\n更多密钥类型可以参考官方文档 generating-a-new-ssh-key\n执行成功后会在 Enter file in which to save the key 目录下创建2个文件：blogkey 和 blogkey.pub，其中 blogkey 是私钥，blogkey.pub 是公钥。如果只输入了文件名称没有目录，又在用户目录执行，所以这2个文件就在用户目录下，也就是 C:\\Users\\Ludard 目录。\n打开 ludard.github.io 公有仓库 -\u0026gt; Settings -\u0026gt; Deploy keys -\u0026gt; Add deploy key\n密钥管理可以参考官方文档 managing-deploy-keys\nTitle 密钥名称填写 ACTIONS_DEPLOY_KEY (这个名称有私库配置公钥时还要用到)，Key 填写 blogkey.pub 公钥文件内容。注意要勾选下面的 Allow write access 给予访问权限。\n注意：\n如果担心手动复制有空行或其它问题，可以使用命令 $ clip \u0026lt; .ssh/blogkey.pub 和 $ clip \u0026lt; .ssh/blogkey 复制到系统粘贴板再粘贴到网页文本框 Key 可以使用公钥内容，也可以使用 key fingerprint，也就是 SHA256:On4M4m... + 邮箱 配置 Deploy key 完成时需要 Github 账户密码验证 打开 hugo-blog-code 源码私有仓库 -\u0026gt; Settings -\u0026gt; Secrets -\u0026gt; Actions ，再点击 New repository secret 按钮新建密钥\n密钥名称和 PAT 一样填写 ACTIONS_DEPLOY_KEY (这个名称就是 SECRETNAME ，在配置 Workflow yml 时还要用到)，Secret填写 blogkey 私钥文件的内容\n配置 Github Action Workflow 从私有仓库编译推送到公有仓库 Github Action Workflow yaml包括如下几个部分：\nCheckout 拉取源码 Setup Hugo 编译Hugo博客 Run Hugo 构建网站，生成内容 Deploy 用 GitHub Pages Deploy Action 将网站内容发布到目标仓库 在 hugo-blog-code 私有仓库打开 Actions 页面，然后再打开 Simple workflow 的 Configure 进入配置面。\n更多 Github Actions 语法可以参考 GitHub Pages action\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 # 编译生成博客，推送到博客仓库 name: Hugo Build \u0026amp; Deploy # Controls when the workflow will run on: # 接收到推送自动推送到公开仓库 push: branches: [ \u0026#34;main\u0026#34; ] pull_request: # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy to Github Pages uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} external_repository: ludard/ludard.github.io publish_branch: gh-pages # default: gh-pages publish_dir: ./public # The folder the action should deploy. 编辑好配置后点击页面右边按钮 Start commit 输入文件名称的描述，再点击 Commit new file 保存工作流配置文件。\n保存后，在项目目录下会多了一个 .github/workflows/blog-builder.yml 的文件\n然后 hugo-blog-code 仓库接收到代码后 Action Workflow 就会自动运行部署\n等待运行完成再打开 ludard.github.io 仓库就可以看到博客内容已经推送过来了\n再等待仓库的状态变成绿色就可以打开网址 https://ludard.github.io ，看到最新博客内容了\n如果没有自已的域名，使用 https://ludard.github.io 域名就可以创作使用了。\n参考资源 GitHub Pages action\nGitHub Actions for Hugo\nhttps://finisky.github.io/deployhugofromprivaterepo/\nhttps://itlab1024.com/archives/165.html\n","permalink":"http://ludard.com/post/tech/create-blog-step-by-step-2/","tags":["博客搭建","Hugo","Github Action"],"title":"「Hugo 博客搭建」2.Github Action 配置"},{"categories":["技术"],"contents":"背景 好记性不如烂笔头，先前好多技术攻关后没有将过程记录下来，回想起来特别可惜。栽一棵树最好的时间是十年前，其次是现在。现在就把博客搭建起来，为以后的一些攻关技术和思考备忘一下，给回忆增加些内容。\n技术框架 Windows + Hugo + Github Pages + Vercel\n准备环境 Windows 10+ 以上版本 Hugo extended windows/amd64 版本，扩展版本解决了很多系统问题 Git bash 执行 hugo命令、下载主题、上传源码到Github 本地已安装好 golang 环境 已创建好本地和 Github 的密钥连接 开始搭建Hugo博客 1. 了解 Hugo 查看官方文档 Hugo Official Docs 或 中文文档 获取帮助手册\nHugo学习笔记\n有哪些好看的Hugo主题？\nhugo中文帮助文档\n2. 下载配置 Hugo 从 Hugo Releases 直接下载安装适合的版本。我创建博客时是2022年9月7日，最新版本是 v0.102.3。下载后解压到安装路径，比如我的安装路径是：C:\\Users\\Ludard\\Programs\\hugo。然后将此路径加入到系统环境变量。\n打开命令行，输入命令：hugo version，如果显示版本信息表示已正确配置。\n如果输入命令后显示：'hugo' 不是内部或外部命令，也不是可运行的程序或批处理文件。 应该是没有加入到系统环境变量或者需要重启计算机。\n注意：我第一次创建网站后删除网站目录，然后再启动调试时报错：Error: Error building site: TOCSS: failed to transform \u0026quot;sass/jane.scss\u0026quot;。官方的 解决方案 是使用扩展程序，也就是含有 extend 的程序，比如Windows就是 hugo_extended_0.102.3_Windows-64bit.zip。然后再启动就可以了\n3. 创建博客网站 打开 Git bash 命令行工具，切换到想到保存网站内容的路径，使用命令：hugo new site myBlog 创建网站。然后就在当前目录创建了一个博客目录。\n如果不想切换目录，可以在创建网站时指定绝对路径：hugo new site /path/to/site\n4. 下载博客主题 我的使用的博客主题是 hugo-theme-jane ，使用下列命令下载主题：\n1 2 3 cd myBlog/ git init git clone https://github.com/xianmin/hugo-theme-jane.git --depth=1 themes/jane 5. 设置博客主题 1 2 cp -r themes/jane/exampleSite/content ./ #复制一些示例文本 cp themes/jane/exampleSite/config.toml ./ #复制默认的站点设置 6. 创建文章 1 2 hugo new post/test.md #创建文章，保存在 content\\post 目录下 hugo new about.md #创建关于页面 7. 启动 hugo 博客 使用命令 hugo server 启动博客：\n如果要显示草稿文章要使用命令 hugo server -D 。\n然后打开浏览器输入地址：http://localhost:1313/ 或 http://127.0.0.1:1313/ 即可看到博客内容：\n如果在启动时报错：failed to transform \u0026quot;sass/jane.scss\u0026quot;\n打开目录 C:\\Users\\Ludard\\AppData\\Local\\Temp\\hugo_cache (Ludard为本机用户名)，删除此目录即可\n8. 博客定制 预览博客页面正常表示创建成功，就可以开始配置博客为自己喜欢的样式了。\n修改之前先将博客内容提交到git，方便修改出错回退\n1 2 3 git status git add . git commit -m \u0026#39;init myBlog\u0026#39; 0x1 博客配置 默认配置文件 config.toml 位于网站的根目录，按自身需要进行定制。 可以参考 https://github.com/xianmin/hugo-theme-jane/tree/master/exampleSite 设置，包含了一个示例 config.toml 配置和 full-config.toml配置，还有一些示例文章。将 config.toml 复制到自己的网站根目录，按自身需要进行修改。（修改配置后网站是实时预览的，非常方便。） 我的博客配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 # 正式环境 http://ludard.com baseURL = \u0026#34;http://ludard.com\u0026#34; # 本地调试 http://localhost:1313/ title = \u0026#34;卢达的技术博客 - 专注于C#|Go|DevOps|运维开发\u0026#34; enableRobotsTXT = true enableEmoji = true theme = \u0026#34;jane\u0026#34; hasCJKLanguage = true # has chinese/japanese/korean ? # 自动检测是否包含 中文\\日文\\韩文 paginate = 3 # Number of articles displayed on the homepage # 首页每页显示的文章数 rssLimit = 20 # Limit Entry Count to Rss file # 限制 Rss 文章输出数量 disqusShortname = \u0026#34;\u0026#34; # disqus_shortname googleAnalytics = \u0026#34;\u0026#34; # UA-XXXXXXXX-X copyright = \u0026#34;卢达\u0026#34; # default: author.name ↓ # 默认为下面配置的author.name ↓ enableGitInfo = true # use git commit log to generate lastmod record # 可根据 Git 中的提交生成最近更新记录。 # uglyURLs = true # more info: https://gohugo.io/content-management/urls/#ugly-urls languageCode = \u0026#34;zh\u0026#34; # language support # en / zh-cn / other... translations present in i18n/ defaultContentLanguage = \u0026#34;zh-cn\u0026#34; # Default language to use [languages.en] languageCode = \u0026#34;en\u0026#34; [languages.zh-cn] languageName = \u0026#34;中文\u0026#34; weight = 2 [author] # essential # 必需 name = \u0026#34;卢达\u0026#34; [sitemap] # essential # 必需 changefreq = \u0026#34;weekly\u0026#34; priority = 0.5 filename = \u0026#34;sitemap.xml\u0026#34; # 配置主菜单 [[menu.main]] name = \u0026#34;主页\u0026#34; weight = 10 identifier = \u0026#34;home\u0026#34; url = \u0026#34;/\u0026#34; [[menu.main]] name = \u0026#34;文章列表\u0026#34; weight = 20 identifier = \u0026#34;archives\u0026#34; url = \u0026#34;/post/\u0026#34; [[menu.main]] name = \u0026#34;标签\u0026#34; weight = 30 identifier = \u0026#34;tags\u0026#34; url = \u0026#34;/tags/\u0026#34; [[menu.main]] name = \u0026#34;分类\u0026#34; weight = 40 identifier = \u0026#34;categories\u0026#34; url = \u0026#34;/categories/\u0026#34; # 代码语法高亮(老版本) # [highlighting] # pygmentsUseClassic = true # pygmentsCodeFences = true # PygmentsCodefencesGuessSyntax = true # pygmentsStyle = \u0026#34;autumn\u0026#34; # PygmentsOptions = \u0026#34;linenos=table\u0026#34; # PygmentsCodeFences = true # 等同[markup] codeFences = true # PygmentsUseClasses = true # 等同[markup] noClasses = false # PygmentsCodefencesGuessSyntax = true # 等同[markup] guessSyntax = true # PygmentsOptions = \u0026#34;linenos=table\u0026#34; # 等同[markup] lineNumbersInTable = true # pygmentsStyle = \u0026#34;manni\u0026#34; # 代码语法高亮，只应用下面的设置即可，如果应用上面就覆盖了 # 更多设置：https://gohugo.io/getting-started/configuration-markup [markup] [markup.highlight] anchorLineNos = true codeFences = true # 代码围栏功能，组织成代码块 guessSyntax = true # 猜测语法高亮 hl_Lines = \u0026#39;\u0026#39; # 高亮的行号，应用于所有代码块。在具体的代码块内设置 hl_inline = false # 将块代码显示为一行，开启后很难看 lineAnchors = \u0026#39;\u0026#39; lineNoStart = 1 # 行号编号起始位置 lineNos = true # 是否显示行号，如果为false不能应用Table样式也就不显示语言 lineNumbersInTable = true # 使用表来格式化行号和代码,而不是标签 noClasses = false # 使用 style 主题样式，如果为false 使用自定义主题样式 noHl = false style = \u0026#39;manni\u0026#39; # 默认monokai 更多：https://xyproto.github.io/splash/docs/all.html tabWidth = 4 [params] since = \u0026#34;2022\u0026#34; # Site creation time # 站点建立时间 homeFullContent = false # if false, show post summaries on home page. Otherwise show full content. rssFullContent = false # if false, Rss feed instead of the summary # site info (optional) # 站点信息（可选，不需要的可以直接注释掉） logoTitle = \u0026#34;卢达的博客\u0026#34; # default: the title value # 默认值: 上面设置的title值 keywords = [\u0026#34;ludard\u0026#34;, \u0026#34;C#\u0026#34;, \u0026#34;.NET\u0026#34;, \u0026#34;go\u0026#34;, \u0026#34;golang\u0026#34;] description = \u0026#34;卢达的技术博客，专注于 C#/Go/DevOps/运维开发。\u0026#34; # 每篇文章下面显示作者信息 showAuthorInfo = true # 日期显示样式, see https://gohugo.io/functions/format/ dateFormatToUse = \u0026#34;2006-01-02\u0026#34; # 是否显示字数统计与阅读时间 样式:「约 1812 字 预计阅读 4 分钟」 # moreMeta = true # 显示中英文语言切换菜单 # showMenuLanguageChooser = true # 添加备案信息 # customFooter = \u0026#34;京ICP备10000000号-1\u0026#34; # 网站左上角显示 Fork me on Github 条带 # forkMeOnGithub = \u0026#34;https://github.com/xianmin/hugo-theme-jane\u0026#34; # 文章全局默认配置，也可以在每篇文章的 front matter 中针对单篇内容关闭或开启某些功能，archetypes/default.md 是模板文件。 toc = true # 是否开启目录 photoswipe = true # 是否启用PhotoSwipe（图片可点击） # see https://github.com/dimsemenov/PhotoSwipe bootcdn = false # 是否使用bootcdn(@Deprecated: 请使用[params.publicCDN]配置) mathjax = true # 是否使用mathjax（数学公式） see https://www.mathjax.org/ katex = false # 是否使用KaTeX （排版格式） see https://github.com/KaTeX/KaTeX contentCopyright = \u0026#39;\u0026lt;a rel=\u0026#34;license noopener\u0026#34; href=\u0026#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;署名-非商业性使用-禁止演绎 4.0 国际许可协议（CC BY-NC-ND 4.0）\u0026lt;/a\u0026gt;\u0026#39; # 自定义样式和效果，样式文件要放在相对路径 /static/css 和 /static/js 目录下 customCSS = [\u0026#34;revise-style.css\u0026#34;, \u0026#34;manni-code-syntax.css\u0026#34;] # 如果启用 [\u0026#39;custom.css\u0026#39;], 加载 \u0026#39;/static/css/custom.css\u0026#39; 文件 customJS = [] # if [\u0026#39;custom.js\u0026#39;], load \u0026#39;/static/js/custom.js\u0026#39; file changyanAppid = \u0026#34;\u0026#34; # Changyan app id # 畅言 changyanAppkey = \u0026#34;\u0026#34; # Changyan app key tencent_analytics = \u0026#34;\u0026#34; # Tencent Analytics baidu_push = false # baidu push # 百度 baidu_analytics = \u0026#34;\u0026#34; # Baidu Analytics baidu_verification = \u0026#34;\u0026#34; # Baidu Verification google_verification = \u0026#34;\u0026#34; # Google_Verification # 谷歌 [params.publicCDN] # 启用公共CDN，需自行定义 enable = false jquery = \u0026#39;\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js\u0026#34; integrity=\u0026#34;sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39; slideout = \u0026#39;\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/slideout@1.0.1/dist/slideout.min.js\u0026#34; integrity=\u0026#34;sha256-t+zJ/g8/KXIJMjSVQdnibt4dlaDxc9zXr/ 9oNPeWqdg=\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39; gitmentJS = \u0026#39;\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/gitment@0.0.3/dist/gitment.browser.min.js\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39; gitmentCSS = \u0026#39;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/gitment@0.0.3/style/default.min.css\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026#39; photoswipe = \u0026#39;\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/photoswipe.js\u0026#34; integrity=\u0026#34;sha256-AC9ChpELidrhGHX23ZU53vmRdz3FhKaN9E28+BbcWBw=\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39; photoswipeUI = \u0026#39;\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/photoswipe-ui-default.min.js\u0026#34; integrity=\u0026#34;sha256-UKkzOn/ w1mBxRmLLGrSeyB4e1xbrp4xylgAWb3M42pU=\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39; photoswipeCSS = \u0026#39;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/photoswipe.css\u0026#34; integrity=\u0026#34;sha256-SBLU4vv6CA6lHsZ1XyTdhyjJxCjPif/TRkjnsyGAGnE=\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026#39; photoswipeSKIN = \u0026#39;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/photoswipe@4.1.3/dist/default-skin/default-skin.css\u0026#34; integrity=\u0026#34;sha256-c0uckgykQ9v5k+IqViZOZKc47Jn7KQil4/MP3ySA3F8=\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026#39; [params.social] # 社交链接 a-email = \u0026#34;mailto:ludard@outlook.com\u0026#34; g-github = \u0026#34;https://github.com/ludard\u0026#34; [params.reward] # 文章打赏 enable = false wechat = \u0026#34;/path/to/your/wechat-qr-code.png\u0026#34; # 微信二维码 alipay = \u0026#34;/path/to/your/alipay-qr-code.png\u0026#34; # 支付宝二维码 [params.counter.busuanzi] # a Chinese visitor counter # 不蒜子计数器 enable = true [params.counter.leancloud] # Chinese leancloud visitor counter # leancloud 计数器 enable = false appId = \u0026#34;\u0026#34; appKey = \u0026#34;\u0026#34; [params.commentCount.disqus] # show counts of comments for Disqus enable = false # 指定 git 仓库地址，可以生成指向最近更新的 git commit 的链接，需要将 enableGitInfo 设置成 true. [params.gitInfo] gitRepo = \u0026#34;https://github.com/ludard/hugo-blog-code\u0026#34; showCommitMessage = true 0x2 文章设置 默认文章文件位于 ./content/post 目录。\n直接运行 hugo 命令，将会自动将网站内容生成到 public/ 目录。\n单篇文章配置，Hugo 允许你使用 yaml， toml 或者 json 语法在你每一篇文章的开头进行设置，称为 元数据。\n设置模板位于 themes\\jane\\archetypes 有两个文件模板：default.md 和 post.md。 default.md 是除 post外的所有文章的默认模板，如 about，post.md 是 post目录内所有文章的模板 要应用这些默认设置需要使用命令 hugo new post/test.md 创建文章，手动创建 Markdown的文章是没有的。 最好禁用 themes\\jane\\archetypes\\post.md 版权设置，禁用后使用全局配置。 # contentCopyright: true ，如果取消注释自动启用。 常用配置：\nweight: 1 置顶文章\nmenu: 自定义菜单\n我的文章设置模板：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 --- title: \u0026#34;{{ replace .TranslationBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; # 文章标题，如果有空格用 - 代替 date: {{ .Date }} # 创建日期 lastmod: {{ .Date }} # 最后修改日期 draft: true # 文章中否是草稿，如果是发布后不显示 keywords: [\u0026#34;技术\u0026#34;] # 文章关键字 description: \u0026#34;\u0026#34; # 文章描述，方便搜索引擎搜索 tags: [] # 文章的标签 categories: [\u0026#34;技术\u0026#34;] # 文章分类，在导航菜单分类里可以看到 author: \u0026#34;卢达\u0026#34; # 文章作者 slug: blog-url-path # 文章的名称，默认是 `title` 的值。我一般title使用中文，slug使用英文 url: post/tech/blog-url-path # 显示在浏览器URL地址栏的地址 # Uncomment to pin article to front page # weight: 1 # 置顶文章 # You can also close(false) or open(true) something for this content. # P.S. comment can only be closed comment: true # 是否显示评论区 toc: true # 显示文章目录 autoCollapseToc: true # 自动展开目录 # You can also define another contentCopyright. e.g. contentCopyright: \u0026#34;This is another copyright.\u0026#34; # contentCopyright: true reward: false # 是否开启打赏 mathjax: true # 是否支持数字公式 # Uncomment to add to the homepage\u0026#39;s dropdown menu; weight = order of article # menu: # main: # parent: \u0026#34;docs\u0026#34; # weight: 1 --- \u0026lt;!--more--\u0026gt; Markdown 文章正文 0x3 自定义页面样式 如果不满意主题的样式，可以按 F12 调整，然后将样式保存在根目录的 \\static\\css 目录下，然后修改博客配置添加自定义样式文件名称。\n比如我自定义了2个文件，revise-style.css 和 manni-code-syntax.css。修改 config.toml 配置，添加这2个样式文件：\n1 2 3 4 customCSS = [ \u0026#34;revise-style.css\u0026#34;, \u0026#34;manni-code-syntax.css\u0026#34;, ] revise-style.css 修改了标签样式，将代码块的字号减小了一点：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 /*代码块样式*/ .post .post-content code, .post .post-content pre{ /* padding: 2px 4px; */ font-size: 0.75em; } .post .post-content .highlight code::after{ color: #93a1a1; } /*标签样式*/ .post .post-footer .post-tags a { color: #c05b4d; word-break: break-all; margin-right: 10px; padding: 1px 10px; border: 1px solid; border-radius: 20px; border-color: #9e9e9e; } .post .post-footer .post-tags a::before { content: \u0026#39;\u0026#39;; } manni-code-syntax.css 自定义了代码块主题的颜色：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 /* Background */ .bg { background-color: #f8f8f8; } /* PreWrapper */ .chroma { background-color: #f8f8f8; } /* Other */ .chroma .x { } /* Error */ .chroma .err { color: #aa0000; background-color: #ffaaaa } /* CodeLine */ .chroma .cl { } /* LineTableTD */ .chroma .lntd { vertical-align: top; padding: 0; margin: 0; border: 0; } /* LineTable */ .chroma .lntable { border-spacing: 0; padding: 0; margin: 0; border: 0; } /* LineHighlight */ .chroma .hl { background-color: #ffffcc } /* LineNumbersTable */ .chroma .lnt { white-space: pre; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f } /* LineNumbers */ .chroma .ln { white-space: pre; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f } /* Line */ .chroma .line { display: flex; } /* Keyword */ .chroma .k { color: #006699; font-weight: bold } /* KeywordConstant */ .chroma .kc { color: #006699; font-weight: bold } /* KeywordDeclaration */ .chroma .kd { color: #006699; font-weight: bold } /* KeywordNamespace */ .chroma .kn { color: #006699; font-weight: bold } /* KeywordPseudo */ .chroma .kp { color: #006699 } /* KeywordReserved */ .chroma .kr { color: #006699; font-weight: bold } /* KeywordType */ .chroma .kt { color: #007788; font-weight: bold } /* Name */ .chroma .n { } /* NameAttribute */ .chroma .na { color: #330099 } /* NameBuiltin */ .chroma .nb { color: #336666 } /* NameBuiltinPseudo */ .chroma .bp { } /* NameClass */ .chroma .nc { color: #00aa88; font-weight: bold } /* NameConstant */ .chroma .no { color: #336600 } /* NameDecorator */ .chroma .nd { color: #9999ff } /* NameEntity */ .chroma .ni { color: #999999; font-weight: bold } /* NameException */ .chroma .ne { color: #cc0000; font-weight: bold } /* NameFunction */ .chroma .nf { color: #cc00ff } /* NameFunctionMagic */ .chroma .fm { } /* NameLabel */ .chroma .nl { color: #9999ff } /* NameNamespace */ .chroma .nn { color: #00ccff; font-weight: bold } /* NameOther */ .chroma .nx { } /* NameProperty */ .chroma .py { } /* NameTag */ .chroma .nt { color: #330099; font-weight: bold } /* NameVariable */ .chroma .nv { color: #003333 } /* NameVariableClass */ .chroma .vc { } /* NameVariableGlobal */ .chroma .vg { } /* NameVariableInstance */ .chroma .vi { } /* NameVariableMagic */ .chroma .vm { } /* Literal */ .chroma .l { } /* LiteralDate */ .chroma .ld { } /* LiteralString */ .chroma .s { color: #A05A48 } /* LiteralStringAffix */ .chroma .sa { color: #A05A48 } /* LiteralStringBacktick */ .chroma .sb { color: #A05A48 } /* LiteralStringChar */ .chroma .sc { color: #A05A48 } /* LiteralStringDelimiter */ .chroma .dl { color: #A05A48 } /* LiteralStringDoc */ .chroma .sd { color: #A05A48; font-style: italic } /* LiteralStringDouble */ .chroma .s2 { color: #A05A48 } /* LiteralStringEscape */ .chroma .se { color: #A05A48; font-weight: bold } /* LiteralStringHeredoc */ .chroma .sh { color: #A05A48 } /* LiteralStringInterpol */ .chroma .si { color: #aa0000 } /* LiteralStringOther */ .chroma .sx { color: #A05A48 } /* LiteralStringRegex */ .chroma .sr { color: #33aaaa } /* LiteralStringSingle */ .chroma .s1 { color: #A05A48 } /* LiteralStringSymbol */ .chroma .ss { color: #ffcc33 } /* LiteralNumber */ .chroma .m { color: #ff6600 } /* LiteralNumberBin */ .chroma .mb { color: #ff6600 } /* LiteralNumberFloat */ .chroma .mf { color: #ff6600 } /* LiteralNumberHex */ .chroma .mh { color: #ff6600 } /* LiteralNumberInteger */ .chroma .mi { color: #ff6600 } /* LiteralNumberIntegerLong */ .chroma .il { color: #ff6600 } /* LiteralNumberOct */ .chroma .mo { color: #ff6600 } /* Operator */ .chroma .o { color: #555555 } /* OperatorWord */ .chroma .ow { color: #000000; font-weight: bold } /* Punctuation */ .chroma .p { } /* Comment */ .chroma .c { color: #A0A1A7; font-style: italic } /* CommentHashbang */ .chroma .ch { color: #A0A1A7; font-style: italic } /* CommentMultiline */ .chroma .cm { color: #A0A1A7; font-style: italic } /* CommentSingle */ .chroma .c1 { color: #A0A1A7; font-style: italic } /* CommentSpecial */ .chroma .cs { color: #A0A1A7; font-weight: bold; font-style: italic } /* CommentPreproc */ .chroma .cp { color: #009999 } /* CommentPreprocFile */ .chroma .cpf { color: #009999 } /* Generic */ .chroma .g { } /* GenericDeleted */ .chroma .gd { background-color: #ffcccc } /* GenericEmph */ .chroma .ge { font-style: italic } /* GenericError */ .chroma .gr { color: #ff0000 } /* GenericHeading */ .chroma .gh { color: #003300; font-weight: bold } /* GenericInserted */ .chroma .gi { background-color: #ccffcc } /* GenericOutput */ .chroma .go { color: #aaaaaa } /* GenericPrompt */ .chroma .gp { color: #000099; font-weight: bold } /* GenericStrong */ .chroma .gs { font-weight: bold } /* GenericSubheading */ .chroma .gu { color: #003300; font-weight: bold } /* GenericTraceback */ .chroma .gt { color: #99cc66 } /* GenericUnderline */ .chroma .gl { text-decoration: underline } /* TextWhitespace */ .chroma .w { color: #bbbbbb } 0x4 自定义代码块主题颜色 自定义代码块主题颜色步骤：\n将博客 config.toml 配置的 noClasses 设置为 false\n1 2 3 [markup] [markup.highlight] noClasses = false # 使用 style 主题样式，如果为false 使用自定义主题样式 使用命令 hugo gen chromastyles --style=manni \u0026gt; manni-code-syntax.css 在当前目录生成 manni-code-syntax.css 文件，再剪切到 \\static\\css 目录下，然后修改文件的样式或颜色。\n注意：manni 是默认支持的主题模板。默认支持的所有主题：Chroma Style Gallery\nmanni-code-syntax.css 是自定义的主题样式文件名称，修改样式里的颜色 color 部分即可，其它的内容最好不要改。\n在修改颜色时最好使用替换，将同一种颜色全部替换为自定义的颜色，这样主题颜色更统一一些。\n代码块支持的所有可以高亮的语言 List of Chroma Highlighting Languages ，如果一种语言有多种叫法只需要确定一种即可，比如代码块是 C# 语言，使用 csharp 或 c# 标记都可以\n1 2 3 ```csharp // ... code ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Bash bash, sh, ksh, zsh, shell C# csharp, c# CoffeeScript coffee-script, coffeescript, coffee CoffeeScript coffee-script, coffeescript, coffee Go go, golang Go HTML Template go-html-template Go HTML Template go-html-template Go Text Template go-text-template GraphQL graphql, graphqls, gql ... 在代码块内也可以高亮某一块区域，\n1 2 3 ```go {linenos=table,hl_lines=[8,\u0026#34;15-17\u0026#34;],linenostart=199} // ... code ``` 效果图：\n​\t更多语法：syntax-highlighting\n0x5 自定义文章结构 定义文章保存物理结构：\n文章保存物理结构主要是保存在本地的组织结构。所有博客文章默认都保存在 content\\post 目录下，如果所有文章都直接放这个目录下时间长了非常难找。所以我是按年份在 post 下新建一级目录，如 2022、2023，然后在年份目录下再按月份新建目录，如 01、02\u0026hellip;12，文章放放在对应的年月目录下。为了方便在本地查看和搜索，所有文章名称格式都是 文章顺序编号.文章中文标题.md。比如：001.Hugo博客搭建_1_搭建本地运行环境.md\n如果要查找只需要查看文章创建日期然后到对应的目录下就可以找到了。\n定义文章显示逻辑结构：\n文章显示逻辑结构主要是浏览器打开博客文章时显示在 URL 地址的结构。通过每篇文章的元数据标签 slug 和 url可以自定义文章URL的组织结构。\nslug 最终URL路径里的文章名称，最好使用英文防止转义乱码（将中文标题翻译为英文即可）。方便URL显示，中文又长又容易乱码，不方便记忆。 url 自定义文章的URL地址，我定义的结构是 文章类型 + 分类 + slug，比较简短好记。文章类型有 post、book等，分类主要有 tech、csharp 、golang、thinking、live 等 比如 001.Hugo博客搭建_1_搭建本地运行环境.md 的文章设置：\ntitle: \u0026quot;「Hugo 博客搭建」1.搭建本地运行环境\u0026quot;\nslug: create-blog-step-by-step-1\nurl: post/tech/create-blog-step-by-step-1\n博客首页和浏览器标签页的标题就是 「Hugo 博客搭建」1.搭建本地运行环境\n打开博客后的文章URL就是 https://ludard.com/post/tech/create-blog-step-by-step-1\n使用这种 分组 + 分类 + 标题 的URL更简洁更容易记忆和理解一些。\n它还有一个好处，使用更短的地址 https://ludard.com/post 可以显示所有文章。\n更多内容组织可查看官方文档 Content Organization\n结构图：\n1 2 3 4 5 6 7 8 9 10 content ├─ about.md ├─ post │ ├─ 2022 │ │ └─ 09 │ │ ├─ 001.Hugo博客搭建_1_搭建本地运行环境.md │ │ ├─ 002.Hugo博客搭建_2_Github Action配置.md │ │ └─ 003.Hugo博客搭建_3_博客加速和自定义域名.md │ └─ syntax-highlighting.md └─ README.md 0x6 自定义图片结构 文章的图片默认保存在 static\\image目录下，和文章一样，时间长了也不容易整理。所以我也是按年月创建目录。\n文章引用图片时有2种方式：\n网络图床，引用时直接使用图片的网络地址，比如：https://ludard.com/image/ludard_logo.png 本地图片，我使用本地图片 在生成博客时，Hugo 会将 static 下的所有内容都复制到 public 目录下，所以图片保存好之后文章的引用路径就是：\n![图片缺省或无法加载时的说明](/image/2022/09/创建日_编号_图片名称.png)\n比如：![hugo_started](/image/2022/09/13_01_hugo_started.png)\n可以把 public 当成根目录 /，图片在Markdown编辑器里无法预览是正常的，网站编译上线后会正常显示的。\n图片目录结构：\n1 2 3 4 5 6 7 8 9 10 11 static ├─ css │ ├─ manni-code-syntax.css │ └─ revise-style.css └─ image ├─ 2022 │ └─ 09 │ ├─ 13_01_started.png │ ├─ 13_02_decompressed.png │ └─ 13_03_path.png └─ about_banner.png 0x7 置顶文章 在文章元数据里设置：weight: 1 即可将文章设置为置顶文章。\n0x8 只显示文章摘要信息 如果文章太长，在首页显示时默认显示非常长，可以在想要截断的地方加上 \u0026lt;!--more--\u0026gt; 标记做截断，这样首页就只显示标记以上的内容+阅读全文。\n0x9 博客多语言支持 如果网站要支持多国语言，需要对 languages 进行配置。\n翻译位于 i18n/ 文件夹下。\n使用特定的翻译：\n1 2 3 4 # 使用中文 defaultContentLanguage = \u0026#34;zh-cn\u0026#34; # 默认使用的语言 [Languages.zh-cn] languageCode = \u0026#34;zh-cn\u0026#34; 有关多语言设置，请查看 Multilingual Mode | Hugo 。\n0x10 博客主题自定义开发 如果要调整的样式非常多，可以在原有的主题上进行自定义开发。\n使用 npm 安装依赖：\n1 2 npm install npm install 命令会同时运行 webpack --watch 和 hugo server 。 如果你修改了任何文件，浏览器将会自动更新。\n9. Hugo 常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #更新到最新hugo版本 go get -u -v github.com/spf13/hugo # 查看hugo版本、配置环境、帮助信息 hugo version hugo env hugo help # all 列出所有文章 drafts 所有草稿 expired 过期文章 future 将来要发布的文章 hugo list all hugo list drafts hugo list expired hugo list future # 创建 about 页面，about.md 自动生成到了 content/about.md hugo new about.md # 创建文章，放到 post 目录，方便之后生成聚合页面 hugo new post/first.md # Hugo调试加载指定主题+草稿文章 hugo server --theme=hyde --buildDrafts # 预览时包含草稿文章 启动后在浏览器里打开： http://localhost:1313 # -D, --buildDrafts 草稿文章 # -E, --buildExpired 过期文章 # -F, --buildFuture 将来要发布的文章 hugo server -D hugo server --buildDrafts # 修改默认端口，指定端口号预览 hugo server -p 端口 hugo server -p 1315 # 加载自定义配置文件 默认path/config.yaml|json|toml hugo serve --config full-config.toml # 加载指定目录的文章 -c, --contentDir hugo serve -c \u0026#34;D:\\github\\hugo-blog-code\\themes\\jane\\exampleSite\u0026#34; # 生成网站，网站内容保存到 `public/` 目录 hugo 如果在预览网站时发现修改后的图片与static\\image的图片不一样，可以删除博客缓存目录再启动调试。\n缓存目录：C:\\Users\\Ludard\\AppData\\Local\\Temp\\hugo_cache\\博客名称\nLudard 是计算机登录名，替换为自己的登录名\n10. 生成网站 使用命令 hugo 生成网站，生成的内容保存在 public/ 目录\n参考资源 Config配置参考\nHugo 代码高亮\nHugo的语法高亮配置\n自定义hugo主题-导航菜单\n","permalink":"http://ludard.com/post/tech/create-blog-step-by-step-1/","tags":["博客搭建","Hugo"],"title":"「Hugo 博客搭建」1.搭建本地运行环境"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\n","permalink":"http://ludard.com/search/","tags":null,"title":"🔍搜索"}]